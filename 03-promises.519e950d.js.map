{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAcF,SAASC,cAAc,wBACrCE,EAAaH,SAASC,cAAc,uBACpCG,EAAYJ,SAASC,cAAc,sBA8BzCF,EAAKM,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBAQN,IANA,IAAMC,EAASC,SAASP,EAAYQ,OAC9BC,EAAOF,SAASL,EAAUM,OAC5BE,EAAQH,SAASN,EAAWO,OAE1BG,EAAW,GAERC,EAAI,EAAGA,EAAIN,EAAQM,IAAK,CAC/B,IAAMC,EAAUC,EAAcF,EAAGF,GACjCC,EAASI,KAAKF,GAEdH,GAASD,C,CAEX,SAASK,EAAcE,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,IAGpC5B,EAAA6B,OAAOC,QAAQ,qBAAoCC,OAAfV,EAAS,QAAYU,OAANT,EAAM,OACzDE,EAAQ,CAAEH,WAAUC,YAEpBtB,EAAA6B,OAAOG,QAAQ,oBAAmCD,OAAfV,EAAS,QAAYU,OAANT,EAAM,OACxDG,EAAO,CAAEJ,WAAUC,U,GAEpBA,E,IAGPC,QAAQU,IAAIjB,GACTkB,MAAK,SAAAC,GACJC,QAAQC,IAAI,yBAA0BF,E,IAEvCG,OAAM,SAAAC,GACLH,QAAQI,MAAM,qCAAsCD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\n\n// form.addEventListener('submit', function (event) {\n//   event.preventDefault();\n\n//   const amount = parseInt(amountInput.value);\n//   const step = parseInt(stepInput.value);\n//   let delay = parseInt(delayInput.value);\n\n//   for (let i = 0; i < amount; i++) {\n//     setTimeout(() => {\n//       createPromise(i, delay);\n//       delay += step;\n//     }, step * i);\n//   }\n// });\n\n// function createPromise(position, delay) {\n\n//   setTimeout(() => {\n//     const shouldResolve = Math.random() > 0.3;\n\n//     if (shouldResolve) {\n//       Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n//     } else {\n//       Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n//     }\n//   });\n// }\n\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const amount = parseInt(amountInput.value);\n  const step = parseInt(stepInput.value);\n  let delay = parseInt(delayInput.value);\n\n  const promises = [];\n\n  for (let i = 0; i < amount; i++) {\n    const promise = createPromise(i, delay);\n    promises.push(promise);\n\n    delay += step;\n  }\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n\n        if (shouldResolve) {\n          Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n          resolve({ position, delay });\n        } else {\n          Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n  Promise.all(promises)\n    .then(results => {\n      console.log('All promises resolved:', results);\n    })\n    .catch(errors => {\n      console.error('At least one promise was rejected:', errors);\n    });\n});\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","addEventListener","event","preventDefault","amount","parseInt","value","step","delay1","promises","i","promise","createPromise","push","position","delay","Promise","resolve","reject","setTimeout","Math","random","Notify","success","concat","failure","all","then","results","console","log","catch","errors","error"],"version":3,"file":"03-promises.519e950d.js.map"}